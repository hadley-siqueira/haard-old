class HivekVM:
    ip   : u64
    regs : u64
    mem  : u8*
    run_flag : bool

    def initialize : void
        ip = 0
        mem = new u8[1024 * 1024 * 8]
        write32(0, 0xffabcdef)

        # C stuff
        printf("v: %x\n", read32(0))

    def print_byte : void
        @byte : u8

        # C stuff
        printf("%x\n", byte)

    def read32 : u64
        @addr : u64

        var v : u64 = 0
        var k : u64

        v = (v << 8) | mem[addr + 0]
        v = (v << 8) | mem[addr + 1]
        v = (v << 8) | mem[addr + 2]
        v = (v << 8) | mem[addr + 3]

        return v

    def write32 : void
        @addr  : u64
        @value : u32

        # v not declared error
        # mem[addr + 0] = (v >> 24) & 0x0ff
        mem[addr + 0] = (value >> 24) & 0x0ff
        mem[addr + 1] = (value >> 16) & 0x0ff
        mem[addr + 2] = (value >>  8) & 0x0ff
        mem[addr + 3] = (value >>  0) & 0x0ff

    def run : void
        while run_flag:
            execute_instruction()

    def execute_instruction : void
        inst = read32(ip)

        if is_16bit_instruction(inst):
            exec_16bit(inst)
        elif is_24bit_instruction(inst):
            exec_24bit(inst)
        else:
            exec_32bit(inst)

    def is_16bit_instruction : bool
        @inst : u32

        return (inst >> 30) == 0
            || (inst >> 30) == 1
            || (inst >> 30) == 2

    def is_24bit_instruction : bool
        @inst : u32

        return (inst >> 24) == 6

    def exec_16bit : void
        @inst : u32

        ip += 2

    def exec_24bit : void
        @inst : u32

        ip += 3

    def exec_32bit : void
        @inst : u32

        OPCODE_32_SH = 32 - 3 - 6
        OPCODE_32_MASK = 0x3F
        FUNCT_32_SH = 0
        FUNCT_32_MASK = 0x7f
        RA_32_MASK = 0x1f
        RA_32_SH = 18
        FUNCT_32_ADD_64 = 0

        opcode = (inst >> OPCODE_32_SH) & OPCODE_32_MASK
        funct  = (inst >> FUNCT_32_SH) & FUNCT_32_MASK
        ra     = (inst >> RA_32_SH) & RA_32_MASK
        rb     = (inst >> RA_32_SH) & RA_32_MASK
        rc     = (inst >> RA_32_SH) & RA_32_MASK

        if opcode == 0:
            if funct == FUNCT_32_ADD_64:
                regs[rc] = regs[ra] + regs[rb]
                ip += 4

    def read_bin : void
        @path : char*

        var c : int
        f = fopen(path, "r")

        i = 0
        while true:
            c = fgetc(f)

            if c == EOF:
                break

            mem[i] = c
            i = i + 1

    def dump : void
        i = 0

        while i < 10:
            print_byte(mem[i])
            i = i + 1

def main : int
    v = HivekVM()
    v.initialize()
    v.read_bin('init.bin')
    v.dump()
