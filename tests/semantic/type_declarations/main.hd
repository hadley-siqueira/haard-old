import foo

class Foo:
    n : int

class Bar:
    n : int

class Bar<T>:
    n : int

class Bar<K, N>:
    n : int

data Tree:
    Leaf : void
    Node : int
    Node : (int, int)

data Tree<T>:
    Leaf : void
    Node : (T, Tree<T>*, Tree<T>*)

struct Pixel:
    r : u8
    g : u8
    b : u8

struct Pixel2:
    r : u8
    g : u8
    b : u8

enum Colors(char):
    RED
    GREEN
    BLUE

enum Colors2:
    RED = 0xff0000
    GREEN = 0x00ff00
    BLUE = 0x0000ff

union Packet:
    header : int
    align  : u8

data Option<T>: 
    None : void
    Some : T

data List<T>:
    None : void
    Cons : (T, List<T>*)

    def to_str : char*
        n = 0

def sum : int
    @a : int
    @b : int

    return a + b

def swap : void
    @a : int*
    @b : int*

    tmp = *a
    *a = *b
    *b = tmp

def foo : void
    @a : Packet
    @b : Packet*
    @c : int

    n = 0

def foo2 : void
    @a : Foo
    @b : Foo&

    n = 0

def foo3 : void
    n = 0

def foo4<T> : void
    @a : T
    @b : T*

    n = 0

def foo4<T, K> : void
    @a : T
    @b : K*

    n = 0

# main.make_pair<T, K>(1, 2, int*)
def make_pair<T, K> : (T, K)
    @a : T
    @b : K
    @c : int*

    c = 0

#const MAX_SIZE = 1024

#def the_array : void
#    @arr : int[MAX_SIZE]
#    @n   : int

#    n = 0
